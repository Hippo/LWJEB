/*
 * Copyright 2020 Hippo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package rip.hippo.lwjeb.listener;

/**
 * @author Hippo
 * @version 5.0.0, 12/2/19
 * @since 5.0.0
 * <p>
 * This is a custom class loader designed to load classes dynamically generated by {@link Listener}.
 * </p>
 */
public final class ListenerClassLoader extends ClassLoader {

  /**
   * Creates a new {@link ClassLoader} that has specified parent.
   *
   * @param parent Parent {@link ClassLoader}
   */
  public ListenerClassLoader(ClassLoader parent) {
    super(parent);
  }

  /**
   * Loads a class by the class name and the bytecode.
   *
   * @param className The classes name.
   * @param bytecode  The classes bytecode.
   * @return The class.
   * @see ClassLoader#defineClass(String, byte[], int, int)
   */
  public Class<?> createClass(String className, byte[] bytecode) {
    try {
      return this.defineClass(className, bytecode, 0, bytecode.length);
    } catch (LinkageError e) {
      return this.findLoadedClass(className);
    }
  }

}
